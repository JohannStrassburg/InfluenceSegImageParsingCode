%
% Egde-Avoiding Wavelets demo
%
% comparison to regular (1st generation) wavelets is implemnented
% by setting sigma=0
%
% Shows (Guided) Edge-Aware Interpolation by colorization, detail
% enhacement and edge-preservign detail suppression.
%
% This code implements the paper "Edge-Avoiding Wavelets and their
% Applications" SIGGRAPH 2009.
%
% Code written by Raanan Fattal 


function eaw_test

clear
%figure(2)

%S = imread('gili_sc.bmp');
%S = imread('cameraman.png');
%S = zeros(size(S))

%x = floor(size(S,1)/4);
%y = floor(size(S,2)/4);

%x = size(S,1);
%y = size(S,2);

%sx = 1
%sy = 1

%while sx<=x && sy<=y
    
%S = zeros([x y 3])



% for k=1:sx:x
%     for l=1:sy:y
% 
%         S(k,l,1) = mod((7*k+10*l+10),360)/360;
%         S(k,l,2) = 1;
%         S(k,l,3) = 1;
%     end
% end

%S = hsv2rgb(S)
        %S = rgb2hsv(S)
        %for
        %S(k,l,1) = 255;

%S(130:150,1:40,3) = 128
%S = imread('flower.bmp');
%G = imread('cameraman.png');
%S = double(S) / 255 ;

img_dir = 'Images';
files   = dir(fullfile(img_dir,'*.jpg'));
progressbar
wave_type = 1;
for i = 1:length(files)
   
    I_path = fullfile(img_dir,files(i).name);
    
    G = imread(I_path);
    %G = imread('gili_bw.bmp');

    G = double(G) / 255 ;
    %[w h c] = size(G) ;
    nlevels = floor(log2(min(size(G(:,:,1))))) ;

    %smth_factor = 0.125 ;

     

    [A W] = EAW(G(:,:,1),nlevels,wave_type,1,1) ;
    [a,b,c] = fileparts(files(i).name);

    %subplot(2,1,1), imagesc(G), title('Input Image'), axis off, drawnow

    %s = size(A,1)

    %im = zeros(size(A{s}))
    %im2 = zeros(size(A{s-1}))
    outfileName = fullfile(strcat('imIndex_',num2str(nlevels)),sprintf('%s.jpeg',b));
    if ~exist(outfileName, 'file')
        for j=nlevels:-1:5

            s = j+1;

            im = zeros(size(A{s}));
            imcell = cell(numel(im), 1);
            for k=1:numel(im)


                im(k) = 1;

                for level=1:j


                    ss = cell(2,1);
                    ss{2} = im;
                    ss{1} = zeros(size(A{s-level}));
                    w = cell(1,1);
                    w{1} = W{s-level};
                    im = igEAW(ss,w,wave_type); 
                    %subplot(2,1,2), imagesc(im), title('Input Scribbles'), axis off, drawnow
                end
                imcell{k} = im;
                outFileName = fullfile(strcat('level_',num2str(j)),sprintf('%s.mat',strcat(b,'_k_',num2str(k))));
                %if ~exist('test', 'dir')
                %    mkdir(strcat('level_',num2str(j)));
                %end
                save(outFileName,'im');

                outFileName = fullfile(strcat('imlevel_',num2str(j)),sprintf('%s.jpeg',strcat(b,'_k_',num2str(k))));
                %im = mat2gray(im)
                %if ~exist(strcat('imlevel_',num2str(j)), 'dir')
                %    mkdir(strcat('imlevel_',num2str(j)));
                %end
                imwrite(im,outFileName);

                im = zeros(size(A{s}));
            end

            m = zeros([size(imcell{1},1) size(imcell{1},2) numel(im)]);
            for c=1:numel(im)

                m(:,:,c) = imcell{c};
            end
            %m = [imcell{1} imcell{2} imcell{3} imcell{4}]
            [val,ind] = max(m,[],3);
            outFileName = fullfile(strcat('index_',num2str(j)),sprintf('%s.mat',b));
            %if ~exist(strcat('index_',num2str(j)), 'dir')
            %        mkdir(strcat('index_',num2str(j)));
            %end
            save(outFileName,'ind');
            outFileName = fullfile(strcat('imIndex_',num2str(j)),sprintf('%s.jpeg',b));
            imwrite(ind,outFileName);
            %subplot(2,1,2), imagesc(ind), title('tadumm'), axis off, drawnow
            %display(i);
        end
    end
    
    progressbar(i/length(files));
    
end



    %[A W] = EAW(G(:,:,1),nlevels,wave_type,1,0) ; % construction wavelets weights based on guiding BW image (A not needed)



 

% N = (abs(S(:,:,1) - S(:,:,2)) > 0.01) ; % extracting scribbles 
% N(abs(S(:,:,2) - S(:,:,3))>0.01) = 1 ;
% 
% for c=1:3
%     tS = S(:,:,c) ;
%     tS(~N) = 0;
%     S(:,:,c) = tS ;
% end
% 
% yuv = rgb2yuv(S) ; % operating on the UV of the YUV color space
% U = yuv(:,:,2) ;
% V = yuv(:,:,3) ;
% 
% N = double(N) ;  % normalization field
% 
% Au = gEAW(U,W,wave_type) ; 
% Av = gEAW(V,W,wave_type) ; 
% An = gEAW(N,W,wave_type) ; 
% 
% for i=1:nlevels+1
%     Au{i,1} = Au{i,1} * smth_factor^i ;
%     Av{i,1} = Av{i,1} * smth_factor^i ;
%     An{i,1} = An{i,1} * smth_factor^i ;
% end
% 
% yuv(:,:,2) = igEAW(Au,W,wave_type) ;
% yuv(:,:,3) = igEAW(Av,W,wave_type) ;
% N = igEAW(An,W,wave_type) ;
% 
% N(N<1e-8) = 1 ;
% 
% yuv(:,:,2) = yuv(:,:,2)./N;  % normalize (like Shepard method)
% yuv(:,:,3) = yuv(:,:,3)./N;
% 
% 
% Y = rgb2yuv(G) ;
% yuv(:,:,1) = ones(size(yuv(:,:,2)))*0;%Y(:,:,1);%ones(size(Y(:,:,1)));%*0 ; % retrieve old Y channel
% yuv(:,:,1) = Y(:,:,1);
% C = yuv2rgb(yuv) ;
% 
% C(C<0) = 0 ;
% C(C>1) = 1 ;
% 
% subplot(2,2,4), imagesc(C), title('Edge-Avoiding Wavelets'), axis off, drawnow
% %    %end
% %end
% sx = sx*2
% sy = sy*2
%    x = floor(x/2)+mod(x,2);
%    y = floor(y/2)+mod(y,2);


% clear
% figure(2)
% 
% S = imread('gili_sc.bmp');
% %S = imread('cameraman.png');
% %S = zeros(size(S))
% 
% x = floor(size(S,1)/4);
% y = floor(size(S,2)/4);
% 
% x = size(S,1);
% y = size(S,2);
% 
% sx = 1
% sy = 1
% 
% while sx<=x && sy<=y
%     
%     S = zeros([x y 3])
%     
%     
%     
%     for k=1:sx:x
%         for l=1:sy:y
%             
%             S(k,l,1) = mod((7*k+10*l+10),360)/360;
%             S(k,l,2) = 1;
%             S(k,l,3) = 1;
%         end
%     end
%     
%     S = hsv2rgb(S)
%             %S = rgb2hsv(S)
%             %for
%             %S(k,l,1) = 255;
%             
%     %S(130:150,1:40,3) = 128
%     %S = imread('flower.bmp');
%     %G = imread('cameraman.png');
%     %S = double(S) / 255 ;
%     G = imread('gili_bw.bmp');
%     %G = imread('cameraman.png');
%     %G = imread('flower.bmp');
%     %G = imread('cameraman.png');
%     G = double(G) / 255 ;
%     [w h c] = size(S) ;
%     nlevels = floor(log2(min(size(S(:,:,1))))) ;
% 
% 
%     subplot(2,2,1), imagesc(G), title('Input Image'), axis off, drawnow
%     subplot(2,2,2), imagesc(S), title('Input Scribbles'), axis off, drawnow
% 
%     smth_factor = 0.125 ;
% 
%     wave_type = 1 ;
% 
%     %[A W] = EAW(G(:,:,1),nlevels,wave_type,1,0) ; % construction wavelets weights based on guiding BW image (A not needed)
% 
% 
% 
%     [A W] = EAW(G(:,:,1),nlevels,wave_type,1,1) ; 
% 
%     N = (abs(S(:,:,1) - S(:,:,2)) > 0.01) ; % extracting scribbles 
%     N(abs(S(:,:,2) - S(:,:,3))>0.01) = 1 ;
% 
%     for c=1:3
%         tS = S(:,:,c) ;
%         tS(~N) = 0;
%         S(:,:,c) = tS ;
%     end
% 
%     yuv = rgb2yuv(S) ; % operating on the UV of the YUV color space
%     U = yuv(:,:,2) ;
%     V = yuv(:,:,3) ;
% 
%     N = double(N) ;  % normalization field
% 
%     Au = gEAW(U,W,wave_type) ; 
%     Av = gEAW(V,W,wave_type) ; 
%     An = gEAW(N,W,wave_type) ; 
% 
%     for i=1:nlevels+1
%         Au{i,1} = Au{i,1} * smth_factor^i ;
%         Av{i,1} = Av{i,1} * smth_factor^i ;
%         An{i,1} = An{i,1} * smth_factor^i ;
%     end
% 
%     yuv(:,:,2) = igEAW(Au,W,wave_type) ;
%     yuv(:,:,3) = igEAW(Av,W,wave_type) ;
%     N = igEAW(An,W,wave_type) ;
% 
%     N(N<1e-8) = 1 ;
% 
%     yuv(:,:,2) = yuv(:,:,2)./N;  % normalize (like Shepard method)
%     yuv(:,:,3) = yuv(:,:,3)./N;
% 
% 
%     Y = rgb2yuv(G) ;
%     yuv(:,:,1) = ones(size(yuv(:,:,2)))*0;%Y(:,:,1);%ones(size(Y(:,:,1)));%*0 ; % retrieve old Y channel
%     yuv(:,:,1) = Y(:,:,1);
%     C = yuv2rgb(yuv) ;
% 
%     C(C<0) = 0 ;
%     C(C>1) = 1 ;
% 
%     subplot(2,2,4), imagesc(C), title('Edge-Avoiding Wavelets'), axis off, drawnow
%     %    %end
%     %end
%     sx = sx*2
%     sy = sy*2
% %    x = floor(x/2)+mod(x,2);
% %    y = floor(y/2)+mod(y,2);
% end

%%%%%%% Speed Check

% clear
% 
% wave_type = 1 ;
% 
% figure(1)
% clf
% colormap(gray(256)) ;
% 
% I = imread('flower.bmp');
% I = double(I) / 255 ;
% [w h c] = size(I) ;
% nlevels = floor(log2(min(size(I(:,:,1)))))-2 ;
% 
% figure(1)
% 
% 
% A = cell(nlevels+1,3) ;
% W = cell(nlevels,3) ;
% 
% nc = 3 ;
% 
% for k=1:3
% R=I ;
% for i=1:nlevels
%     [tA tW] = EAW(R,1,wave_type,1,1) ; % process a single level at a time
%                                        % (not really needed - it's just for
%                                        % this demo)
%     for c=1:nc
%         A{i,c} = tA{1,c} ;
%         W{i,c} = tW{1,c} ;
%     end
%     
%     R = reshape([tA{2,1} tA{2,2} tA{2,3}],size(tA{2,1},1),size(tA{2,1},2),3) ;
%     
%     R(R>1)=1;
%     R(R<0)=0;
%     imagesc(R)
%     drawnow
% end
% title('Forward Transform Speed Check')
% drawnow
% end
% pause(0.1)


%%%%%%% Detail Enhacement


% clear
% 
% wave_type = 1 ;
% 
% figure(1)
% clf
% colormap(gray(256)) ;
% 
% I = imread('flower.bmp');
% I = double(I) / 255 ;
% [w h c] = size(I) ;
% nlevels = floor(log2(min(size(I(:,:,1)))))-1 ;
% 
% figure(1)
% 
% subplot(2,3,1), imagesc(I), title('Input'), axis off ;  drawnow
% I = rgb2hsv(I) ;
% 
% R = I ;
% [A W] = EAW(R(:,:,3),nlevels,wave_type,1,0) ; % sigma = 0
% for i=1:nlevels
%     A{i,1} = A{i,1} * 1.5^(nlevels-i) ;  % enhance fine detail  
% end
% R(:,:,3) = iEAW(A,W,wave_type) ;
% 
% R = hsv2rgb(R) ;
% 
% R(R<0) = 0 ;
% R(R>1) = 1 ;
% 
% subplot(2,3,2), imagesc(R), title('Regular Wavelets'), axis off ; drawnow
% 
% R = I ;
% [A W] = EAW(R(:,:,3),nlevels,wave_type,1,1) ;
% for i=1:nlevels
%     A{i,1} = A{i,1} * 1.4^(nlevels-i) ;
%     
% end
% R(:,:,3) = iEAW(A,W,wave_type) ;
% 
% R = hsv2rgb(R) ;
% 
% R(R<0) = 0 ;
% R(R>1) = 1 ;
% 
% subplot(2,3,3), imagesc(R), title('Edge-Avoiding Wavelets'), axis off ;  drawnow
% nlevels = floor(log2(min(size(I(:,:,1)))))-2 ;
% 
% R = I ;
% [A W] = EAW(R(:,:,3),nlevels,wave_type,1,0) ;
% for i=1:nlevels
%     A{i,1} = A{i,1} * 0.7^(nlevels+1-i) ;  % attenuate fine detail
% end
% R(:,:,3) = iEAW(A,W,wave_type) ;
% 
% R = hsv2rgb(R) ;
% 
% R(R<0) = 0 ;
% R(R>1) = 1 ;
% 
% subplot(2,3,5), imagesc(R), title('Regular Wavelets'), axis off ;  drawnow
% 
% 
% R = I ;
% [A W] = EAW(R(:,:,3),nlevels,wave_type,1,1) ;
% for i=1:nlevels
%     A{i,1} = A{i,1} * 0.7^(nlevels+1-i) ;  
% end
% R(:,:,3) = iEAW(A,W,wave_type) ;
% 
% R = hsv2rgb(R) ;
% 
% R(R<0) = 0 ;
% R(R>1) = 1 ;
% 
% subplot(2,3,6), imagesc(R), title('Edge-Avoiding Wavelets'), axis off ;  drawnow



%%%%%%% Rewritten Code
% clear
% 
% wave_type = 1 ;
% 
% figure(3)
% clf
% colormap(gray(256)) ;
% 
% I = imread('flower.bmp');
% I = double(I) / 255 ;
% [w h c] = size(I) ;
% nlevels = floor(log2(min(size(I(:,:,1)))))-2 ;
% 
% I = rgb2hsv(I) ;
% 
% A = cell(nlevels+1,3) ;
% W = cell(nlevels,3) ;
% 
% nc = 3 ;
% 
% for k=1:2
%     R=I ;
% 
%     [A W] = EAW(R(:,:,3),nlevels,wave_type,1,1) ;
%     for i=1:nlevels
%         A{i,1} = A{i,1} * (0.001*k)^(nlevels+1-i) ;  
%     end
%     R(:,:,3) = iEAW(A,W,wave_type) ;
% 
%     R = hsv2rgb(R) ;
% 
%     R(R<0) = 0 ;
%     R(R>1) = 1 ;
% 
%     imagesc(R)
%     drawnow
% end
% title('Forward Transform Speed Check')
% drawnow


%%%%%%% Guided Edge-Aware Interpolation

% clear
% figure(2)
% 
% S = imread('gili_sc.bmp');
% S = zeros(size(S))
% S(1:32,1:40) = 255
% %S = imread('flower.bmp');
% %G = imread('cameraman.png');
% S = double(S) / 255 ;
% G = imread('gili_bw.bmp');
% %G = imread('flower.bmp');
% %G = imread('cameraman.png');
% G = double(G) / 255 ;
% [w h c] = size(S) ;
% nlevels = floor(log2(min(size(S(:,:,1))))) ;
% 
% figure(2)
% subplot(2,2,1), imagesc(G), title('Input Image'), axis off, drawnow
% subplot(2,2,2), imagesc(S), title('Input Scribbles'), axis off, drawnow
% 
% smth_factor = 0.125 ;
% 
% wave_type = 1 ;
% 
% [A W] = EAW(G(:,:,1),nlevels,wave_type,1,0) ; % construction wavelets weights based on guiding BW image (A not needed)
% 
% N = (abs(S(:,:,1) - S(:,:,2)) > 0.01) ; % extract scribbles 
% 
% for c=1:3
%     tS = S(:,:,c) ;
%     tS(~N) = 0;
%     S(:,:,c) = tS ;
% end
% 
% yuv = rgb2yuv(S) ; % operating on the UV of the YUV color space
% U = yuv(:,:,2) ;
% V = yuv(:,:,3) ;
% 
% N = double(N) ;  % normalization field
% 
% Au = gEAW(U,W,wave_type) ; % Forward transform using weights W
% Av = gEAW(V,W,wave_type) ; 
% An = gEAW(N,W,wave_type) ; 
% 
% 
% %rewritting
% [A W] = EAW(G,nlevels,wave_type,1,0) ;
% %%im = ones([533 800 3])*0.5;
% %im = mat2gray(im)
% %%I = im;%mat2rgb(im)
% %%I = double(I)/255;
% %%[a w] = EAW(I,nlevels, wave_type,1,1);
% %%b = iEAW(a,W,wave_type);
% %b = b/max(b(:));
% %I = mat2gray(b);
% %%I = b;
% %colormap(gray);
% %%subplot(2,2,3), imagesc(I), title('tadaa'), axis off, drawnow
% 
% 
% % for k=1:size(A{6,1},1)
% %     for l=1:size(A{6,1},2)
% %         
% %         z = zeros([size(A{4,1},1) size(A{4,1},2)]);
% %         z(k,l) = 1;
% %         a = cell(size(A));
% %         for m=1:size(a,1)
% %             for n=1:size(a,2)
% %                 a{m,n}=zeros(size(A{m,n}));
% %                 %a{m,n}(k,l)= 1;
% %             end
% %         end
% %         %a{8,1}=ones(size(A{8,3}));
% %         %a{8,2}=ones(size(A{8,3}));
% %         %a{8,3}=ones(size(A{8,3}));
% %         a{6,1}(k,l)=A{6,1}(k,l);
% %         a{7,1}(k,l)=A{7,1}(k,l);
% %         %a{8,2}(k,l)=1;
% %         %a{8,3}(k,l)=1;
% %         %a = gEAW(z,W,wave_type);
% %         b = igEAW(a,W,wave_type);
% %         i = b;
% %         i = i/max(i(:));
% %         I = mat2gray(i);
% %         colormap(gray);
% %         subplot(2,2,3), imagesc(I), title('tadaa'), axis off, drawnow
% %         print k
% %         print l
% %     end
% % end
% 
% for i=1:nlevels+1
%     Au{i,1} = Au{i,1} * smth_factor^i ;
%     Av{i,1} = Av{i,1} * smth_factor^i ;
%     An{i,1} = An{i,1} * smth_factor^i ;
% end
% 
% yuv(:,:,2) = igEAW(Au,W,wave_type) ; % inv transform using weight W
% yuv(:,:,3) = igEAW(Av,W,wave_type) ;
% N = igEAW(An,W,wave_type) ;
% 
% 
% N(N<1e-8) = 1 ;
%     
% yuv(:,:,2) = yuv(:,:,2)./N;  % normalize (like Shepard method)
% yuv(:,:,3) = yuv(:,:,3)./N;
% 
% Y = rgb2yuv(G) ;
% yuv(:,:,1) = Y(:,:,1) ; % retrieve old Y channel
% C = yuv2rgb(yuv) ;
% 
% C(C<0) = 0 ;
% C(C>1) = 1 ;
% 
% subplot(2,2,3), imagesc(C), title('Regular Wavelets'), axis off, drawnow
% 
% 
% 
% [A W] = EAW(G(:,:,1),nlevels,wave_type,1,1) ; 
% 
% N = (abs(S(:,:,1) - S(:,:,2)) > 0.01) ; % extracting scribbles 
% 
% for c=1:3
%     tS = S(:,:,c) ;
%     tS(~N) = 0;
%     S(:,:,c) = tS ;
% end
% 
% yuv = rgb2yuv(S) ; % operating on the UV of the YUV color space
% U = yuv(:,:,2) ;
% V = yuv(:,:,3) ;
% 
% N = double(N) ;  % normalization field
% 
% Au = gEAW(U,W,wave_type) ; 
% Av = gEAW(V,W,wave_type) ; 
% An = gEAW(N,W,wave_type) ; 
% 
% for i=1:nlevels+1
%     Au{i,1} = Au{i,1} * smth_factor^i ;
%     Av{i,1} = Av{i,1} * smth_factor^i ;
%     An{i,1} = An{i,1} * smth_factor^i ;
% end
% 
% yuv(:,:,2) = igEAW(Au,W,wave_type) ;
% yuv(:,:,3) = igEAW(Av,W,wave_type) ;
% N = igEAW(An,W,wave_type) ;
% 
% N(N<1e-8) = 1 ;
%     
% yuv(:,:,2) = yuv(:,:,2)./N;  % normalize (like Shepard method)
% yuv(:,:,3) = yuv(:,:,3)./N;
% 
% 
% Y = rgb2yuv(G) ;
% yuv(:,:,1) = ones(size(Y(:,:,1)))*0 ; % retrieve old Y channel
% C = yuv2rgb(yuv) ;
% 
% C(C<0) = 0 ;
% C(C>1) = 1 ;
% 
% subplot(2,2,4), imagesc(C), title('Edge-Avoiding Wavelets'), axis off, drawnow




%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function J = rgb2yuv(I)

M = [0.299 0.587 0.114 ; -0.147 -0.289 0.436 ; 0.615 -0.515 -0.1] ;

for c=1:3
    J(:,:,c) = M(c,1) * I(:,:,1) + M(c,2) * I(:,:,2) + M(c,3) * I(:,:,3) ;
end

function J = yuv2rgb(I)

M = inv([0.299 0.587 0.114 ; -0.147 -0.289 0.436 ; 0.615 -0.515 -0.1]) ;

for c=1:3
    J(:,:,c) = M(c,1) * I(:,:,1) + M(c,2) * I(:,:,2) + M(c,3) * I(:,:,3) ;
end
